options {
    JAVA_UNICODE_ESCAPE=true;
    STATIC=false;
    LOOKAHEAD=2;
    //DEBUG_TOKEN_MANAGER=true;
    //DEBUG_PARSER=true;
}

PARSER_BEGIN(OWLBGPParser)

// generated with Javacc 5.0: ./javacc -OUTPUT_DIRECTORY=/Users/bglimm/Documents/workspace/OWL-BGP/src/org/semanticweb/sparql/owlbgp/parser/  ~/Documents/workspace/OWL-BGP/src/org/semanticweb/sparql/owlbgp/parser/OWLBGPParser.jj  

package org.semanticweb.sparql.owlbgp.parser;

import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.semanticweb.sparql.owlbgp.model.IRI;
import org.semanticweb.sparql.owlbgp.model.Identifier;
import org.semanticweb.sparql.owlbgp.model.Ontology;
import org.semanticweb.sparql.owlbgp.model.Prefixes;
import org.semanticweb.sparql.owlbgp.model.UntypedVariable;
import org.semanticweb.sparql.owlbgp.model.Variable;
import org.semanticweb.sparql.owlbgp.model.axioms.Axiom;
import org.semanticweb.sparql.owlbgp.model.classexpressions.Clazz;
import org.semanticweb.sparql.owlbgp.model.dataranges.Datatype;
import org.semanticweb.sparql.owlbgp.model.individuals.AnonymousIndividual;
import org.semanticweb.sparql.owlbgp.model.individuals.IndividualVariable;
import org.semanticweb.sparql.owlbgp.model.individuals.NamedIndividual;
import org.semanticweb.sparql.owlbgp.model.literals.TypedLiteral;
import org.semanticweb.sparql.owlbgp.model.properties.AnnotationProperty;
import org.semanticweb.sparql.owlbgp.model.properties.DataProperty;
import org.semanticweb.sparql.owlbgp.model.properties.ObjectProperty;

@SuppressWarnings("unused")
public class OWLBGPParser {

    public static final String LB = System.getProperty("line.separator") ;

    protected Identifier base;
    protected int blankNodeId=0;
    protected final Map<String, AnonymousIndividual> string2AnonymousIndividual=new HashMap<String, AnonymousIndividual>();
    protected final TripleConsumer handler=new TripleConsumer();
    protected final Prefixes pm=new Prefixes();
    {
        pm.declareSemanticWebPrefixes();
    }
    public void loadDeclarations(Set<Clazz> classes, Set<Datatype> dts, Set<ObjectProperty> ops, Set<DataProperty> dps, Set<AnnotationProperty> aps, Set<NamedIndividual> inds) {
        handler.setClassesInOntologySignature(classes);
        handler.setCustomDatatypesInOntologySignature(dts);
        handler.setObjectPropertiesInOntologySignature(ops);
        handler.setDataPropertiesInOntologySignature(dps);
        handler.setAnnotationPropertiesInOntologySignature(aps);
        handler.setIndividualsInOntologySignature(inds);
    }
    public void setClassesInOntologySignature(Set<Clazz> classes) {
        handler.setClassesInOntologySignature(classes);
    }
    public void setObjectPropertiesInOntologySignature(Set<ObjectProperty> objectProperties) {
        handler.setObjectPropertiesInOntologySignature(objectProperties);
    }
    public void setDataPropertiesInOntologySignature(Set<DataProperty> dataProperties) {
        handler.setDataPropertiesInOntologySignature(dataProperties);
    }
    public void setAnnotationPropertiesInOntologySignature(Set<AnnotationProperty> properties) {
        handler.setAnnotationPropertiesInOntologySignature(properties);
    }
    public void setIndividualsInOntologySignature(Set<NamedIndividual> individuals) {
        handler.setIndividualsInOntologySignature(individuals);
    }
    public void setCustomDatatypesInOntologySignature(Set<Datatype> customDatatypes) {
        handler.setCustomDatatypesInOntologySignature(customDatatypes);
    }
    public static void main(String[] args) {
//        String s="<http://example.org/Person> rdf:type owl:Class . <http://example.org/Birte> rdf:type <http://example.org/Person> .";
        String s="?x a owl:ObjectProperty ."+LB;
        s+="<http://www.co-ode.org/ontologies/galen#hasShapeAnalogousTo> a owl:ObjectProperty ."+LB;
        s+= "<http://www.co-ode.org/ontologies/galen#FeatureStateAttribute> a owl:ObjectProperty ."+LB;

        s+= "?prop a owl:ObjectProperty ."+LB
            + "?class a owl:Class ."+LB
            + "?conj a owl:Class ."+LB
            + "?class rdfs:subClassOf ["+LB
            + "   a owl:Restriction ; "+LB
            + "   owl:onProperty <http://www.co-ode.org/ontologies/galen#hasShapeAnalogousTo> ; "+LB
            + "   owl:someValuesFrom ["+LB
            + "      a owl:Class ;"+LB
            + "      owl:intersectionOf ("+LB
            + "         ?conj "+LB
            + "         ["+LB
            + "            a owl:Restriction ;"+LB
            + "            owl:onProperty <http://www.co-ode.org/ontologies/galen#hasShapeAnalogousTo> ; "+LB //?prop
            + "            owl:someValuesFrom <http://www.co-ode.org/ontologies/galen#linear> "+LB
            + "         ]"+LB
            + "      ) ;"+LB
            + "   ]"+LB
            + "] . "+LB
            + "?conj rdfs:subClassOf ["+LB
            + "   a owl:Class ; "+LB
            + "   owl:unionOf ( <http://www.co-ode.org/ontologies/galen#Shape> <http://www.co-ode.org/ontologies/galen#AnatomicalShape> ) . "+LB
            + "] . "+LB
            + "?prop a owl:FunctionalProperty . "+LB
            + "?prop a owl:IrreflexiveProperty . "+LB
            + "?prop rdfs:subPropertyOf <http://www.co-ode.org/ontologies/galen#FeatureStateAttribute> . ";
//        s+="<http://example.org/Person> rdf:type owl:Class . ?x rdf:type <http://example.org/Person> .";
        OWLBGPParser parser=new OWLBGPParser(new StringReader(s));
        try {
            parser.parse();
//            for (Axiom axiom :parser.getParsedAxioms())
//                System.out.println(axiom);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    protected int getNextBlankNodeID() {
        return blankNodeId++;
    }
    protected AnonymousIndividual getAnonymousIndividual(String label) {
        if (label==null || "".equals(label)) return AnonymousIndividual.create(""+getNextBlankNodeID());
        if (string2AnonymousIndividual.containsKey(label)) return string2AnonymousIndividual.get(label);
        AnonymousIndividual ai=AnonymousIndividual.create(label+"_"+getNextBlankNodeID());
        string2AnonymousIndividual.put(label, ai);
        return ai;
    }
    protected Identifier getIRIFromQName(String qname) throws ParseException {
        int colonIndex=qname.indexOf(':');
        if (colonIndex==-1) throw new ParseException("Not a valid qname (missing ':') " + qname);
        String prefix=qname.substring(0,colonIndex);
        if (prefix.equals("_")) {
            return getAnonymousIndividual(qname.substring(colonIndex + 1));
        }
        if (pm.getPrefixIRI(prefix)==null) 
            throw new ParseException("Prefix not declared: " + prefix);
        return IRI.create(pm.expandAbbreviatedIRI(qname));
    }
    public IRI getIRI(String s) {
        if (s.charAt(0)=='<') s=s.substring(1,s.length()-1);
        return IRI.create(s);
    }
    public Set<Axiom> getParsedAxioms() {
        return handler.getAxioms();
    }
    public Set<IndividualVariable> getVariablesForAnonymousIndividual() {
        return handler.getVariablesForAnonymousIndividual();
    }
    public Ontology getParsedOntology() {
        return handler.getOntology();
    }
    public static String unescapeString(String s) {
        if (s.indexOf('\u005c\u005c')==-1) return s;
        int length=s.length();
        StringBuilder sb=new StringBuilder(length);
        for (int i=0; i<length; i++) {
            char ch=s.charAt(i);
            if (ch=='\u005c\u005c') {
                int j=i+1;
                if (j<length) {
                    char escCh=s.charAt(j);
                    if (escCh=='\u005c\u005c' || escCh=='\u005c"') {
                        i++;
                        sb.append(escCh);
                    }
                } else sb.append('\u005c\u005c');
            } else sb.append(ch);
        }
        return sb.toString();
    }
}

PARSER_END(OWLBGPParser)

SKIP: {" " | "\n" | "\t" | "\r"}

SKIP: { <COMMENT: "#" (~["\n"])*> }

/////////////////////////////////////////////////////////////////////////////////////////////

MORE : { "\"": IN_STRING }
<IN_STRING> MORE : { <  ("\\\"")|~["\""] > }
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }
MORE : { "\"\"\"" : IN_LONG_STRING }
<IN_LONG_STRING> MORE : { <  ~[] > }
<IN_LONG_STRING> TOKEN : { <LONG_STRING: "\"\"\""> : DEFAULT }

/////////////////////////////////////////////////////////////////////////////////////////////

TOKEN: { <DIGIT: ["0"-"9"]> }
TOKEN: { <INTEGER: ("+" | "-")? (<DIGIT>)+> }
TOKEN: { <DOUBLE: ("-" | "+") ? (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT> | "." (<DIGIT>)+ <EXPONENT> | (<DIGIT>)+ <EXPONENT>)> }
TOKEN: { <DECIMAL: ("-" | "+")? ( (<DIGIT>)+ "." (<DIGIT>)* | "." (<DIGIT>)+ | (<DIGIT>)+ )> }
TOKEN: { <EXPONENT: ("e" | "E") ("-" | "+")? (<DIGIT>)+> }
TOKEN: { <OPENPAR: "("> }
TOKEN: { <CLOSEPAR: ")"> }
TOKEN: { <OPEN_SQUARE_BRACKET: "["> }
TOKEN: { <CLOSE_SQUARE_BRACKET: "]"> }
TOKEN: { <COMMA: ","> }
TOKEN: { <DOT: "."> }
TOKEN: { <SEMICOLON: ";"> }
TOKEN: { <PREFIX: "@prefix"> }
TOKEN: { <DOUBLE_CARET: "^^"> }
TOKEN: { <BASE: "@base"> }
TOKEN: { <AT: "@"> }
TOKEN: { <A: "a"> }
TOKEN: { <EMPTY_BLANK_NODE: <OPEN_SQUARE_BRACKET><CLOSE_SQUARE_BRACKET>> }
TOKEN: { <NODE_ID_START: "_:"> }
TOKEN: { <TRUE: "true"> }
TOKEN: { <FALSE: "false"> }
TOKEN: { <LETTER: ["a"-"z"] | ["A"-"Z"]> }

////////////////////////////////////////////////////////////////////////////////////////////
// IRIs

TOKEN: { <FULLIRI: "<"(~[">", " "])*">"> }
TOKEN: { <PNAME_NS: (<PN_PREFIX>)? ":"> }
TOKEN: { <PN_LOCAL: ( <PN_CHARS_U> | ["0"-"9"] ) ((<PN_CHARS>|".")* <PN_CHARS>)?> }
TOKEN: { <PNAME_LN: <PNAME_NS> <PN_LOCAL>> }
TOKEN: { <PN_PREFIX: <PN_CHARS_BASE>((<PN_CHARS>|".")* <PN_CHARS>)?> }
TOKEN: { <PN_CHARS_BASE: ["A"-"Z"] | ["a"-"z"] | ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] | ["\u00F8"-"\u02FF"] | ["\u0370"-"\u037D"] | ["\u037F"-"\u1FFF"] | ["\u200C"-"\u200D"] | ["\u2070"-"\u218F"] | ["\u2C00"-"\u2FEF"] | ["\u3001"-"\uD7FF"] | ["\uF900"-"\uFDCF"] | ["\uFDF0"-"\uFFFD"] > }
TOKEN: { <PN_CHARS: <PN_CHARS_U> | "-" | ["0"-"9"] | "\u00B7" | ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"]> }
TOKEN: { <PN_CHARS_U: <PN_CHARS_BASE> | "_"> }
TOKEN: { <VAR: <VAR1> | <VAR2>> }
TOKEN: { <VAR1: "?"<VARNAME>> }
TOKEN: { <VAR2: "$"<VARNAME>> }
TOKEN: { <VARNAME:  ( <PN_CHARS_U> | ["0"-"9"]  | "\u002F" ) (<PN_CHARS_U> | ["0"-"9"] | "\u00B7" | ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"] | "\u002F" )*> }
TOKEN: { <NODEID: <NODE_ID_START><PN_LOCAL>> }
TOKEN: { <ERROR: ~[]> }

/////////////////////////////////////////////////////////////////////////////////////////////

void parse() : 
{
}
{   
    parseTriples()(<DOT>parseTriples())* {handler.handleEnd();}
}
void parseTriples() :
{
    Identifier subject;
    //subject = parseSubject() (parsePredicateObjectList(subject))?
}
{
    subject = parseSubject() parsePredicateObjectList(subject)
    
}

Identifier parseSubject() :
{
    Identifier identifier;
}
{
    (identifier=parseResource() | identifier=parseBlankNode() | identifier=parseVariable()) {
        return identifier;
    }
}

Identifier parseAbbreviatedIRI() :
{
    Token t;
}
{
    t=<PNAME_LN> {
        return getIRIFromQName(t.image);
    }
}

IRI parseIRI() :
{
    Token t;
}
{
    t=<FULLIRI> {return getIRI(t.image);}
}

AnonymousIndividual parseBlankNode() :
{
    AnonymousIndividual ind=null;
    Token t;
}
{
    (ind=parseNodeID()
    |
    <EMPTY_BLANK_NODE>{ if (ind==null) { ind=getAnonymousIndividual(""); } } (parsePredicateObjectList(ind))
    |
    <OPEN_SQUARE_BRACKET> ({ if (ind==null) { ind=getAnonymousIndividual(""); } } parsePredicateObjectList(ind) (<DOT>)?)? <CLOSE_SQUARE_BRACKET> { if (ind==null) { ind=getAnonymousIndividual(""); }}    
    |
    ind=parseCollection()) {
        return ind;
    }
}

AnonymousIndividual parseNodeID() :
{
    Token t;
}
{
    t=<NODEID> {
        return getAnonymousIndividual(t.image.substring(2));
    }
}

Variable parseVariable() :
{
    Variable var;
    Token t;
}
{
    t=<VAR> {
        return UntypedVariable.create(t.image.substring(1));
    }
}

void parsePredicateObjectList(Identifier subject) :
{
    Identifier predicate;
}
{
    (predicate=parseVerb() parseObjectList(subject, predicate) (<SEMICOLON> predicate=parseVerb() parseObjectList(subject, predicate) )*) (<SEMICOLON>)?
}

Identifier parseVerb() :
{
    Identifier iri;
}
{
    (<A>{iri = Vocabulary.RDF_TYPE;} | iri=parsePredicate()) {
        return iri;
    }
}

Identifier parsePredicate() :
{
    Identifier iri;
}
{
    (iri=parseResource() | iri=parseVariable()) {
        return iri;
    }
}

Identifier parseResource() :
{
    Identifier iri;
}
{
    (iri=parseIRI() | iri=parseAbbreviatedIRI()) {
        return iri;
    }
}


void parseObjectList(Identifier subject, Identifier predicate) :
{
    
}
{
    parseObject(subject, predicate) ( <COMMA> parseObject(subject, predicate) )*
}

void parseObject(Identifier subject, Identifier predicate) :
{
    Identifier resObject;
}
{
    ( 
    parseLiteral(subject, predicate) | (resObject=parseResource() | resObject=parseBlankNode() | resObject=parseVariable()) 
    {
        handler.handleStreaming(subject, predicate, resObject);
    }
    )
}

AnonymousIndividual parseCollection() :
{
    AnonymousIndividual identifier;
}
{
    <OPENPAR> identifier=parseItemList() <CLOSEPAR> {
        return identifier;
    }
}

AnonymousIndividual parseItemList() :
{
    //  _x  rdf:type rdf:List
    //  _x  rdf:first
    //  _x  rdf:next
    AnonymousIndividual firstSubject=null;
    AnonymousIndividual subject=null;
    Identifier first=Vocabulary.RDF_FIRST;
    Identifier rest=Vocabulary.RDF_REST;
    Identifier nil=Vocabulary.RDF_NIL;
}
{
    (
    {
        AnonymousIndividual prevSubject = subject;
        subject=getAnonymousIndividual("");
        if (prevSubject!=null) handler.handleStreaming(prevSubject, rest, subject);
        else firstSubject=subject;
    }
        parseObject(subject, first))* {
        // Terminate list
        handler.handleStreaming(subject, rest, nil);
        return firstSubject;
    }
}


void parseLiteral(Identifier subject, Identifier predicate) :
{
    String lexicalForm;
    String lang=null;
    Identifier datatypeIdentifier=null;
    Datatype dt=null;
    Token t;
}
{
    (lexicalForm=parseQuotedString() ((<DOUBLE_CARET> datatypeIdentifier=parseResource()) | (("@" (t=<PN_LOCAL>)){lang=t.image;}) | <AT>)?
        {
      if (datatypeIdentifier==IRI.create(Prefixes.s_semanticWebPrefixes.get("rdf")+"PlainLiteral")) {
          int atLocation=lexicalForm.lastIndexOf("@");
          lang=lexicalForm.substring(atLocation+1);
          lexicalForm=lexicalForm.substring(0, atLocation);
      }
      if (datatypeIdentifier==null)
          datatypeIdentifier=IRI.create(Prefixes.s_semanticWebPrefixes.get("rdf")+"PlainLiteral");
      dt=Datatype.create((IRI)datatypeIdentifier);
      if (lang==null) lang="";
      handler.handleStreaming(subject, predicate, TypedLiteral.create(lexicalForm, lang, dt));
        }
    )
    |
    (lexicalForm=parseInteger(){handler.handleStreaming(subject, predicate, TypedLiteral.create(lexicalForm, "", Datatype.XSD_INTEGER));})
    |
    (lexicalForm=parseDouble(){handler.handleStreaming(subject, predicate, TypedLiteral.create(lexicalForm, "", Datatype.XSD_DOUBLE));})
    |
    (lexicalForm=parseDecimal(){handler.handleStreaming(subject, predicate, TypedLiteral.create(lexicalForm, "", Datatype.XSD_DECIMAL));})
    |
    (lexicalForm=parseBoolean(){handler.handleStreaming(subject, predicate, TypedLiteral.create(lexicalForm, "", Datatype.XSD_BOOLEAN));})
}


String parseInteger() :
{
    Token t;
}
{
    t=<INTEGER> {
        return t.image;
    }
    |
    t=<DIGIT> {
        return t.image;
    }
}

String parseDouble() :
{
    Token t;
}
{
    t=<DOUBLE> {
        return t.image;
    }
}

String parseDecimal() :
{
    Token t;
}
{
    t=<DECIMAL> {
        return t.image;
    }
}

String parseBoolean() :
{
    Token t;
}
{
    (t=<TRUE> | t=<FALSE>) {
        return t.image;
    }
}

String parseQuotedString() :
{
    String s;
}
{
    s=parseString() {
        return s;
    }
}


String parseString() :
{
    Token t;
    String rawString = "";
}
{
    (t=<STRING> {
        rawString = t.image.substring(1, t.image.length() - 1);
    }
    | t=<LONG_STRING> {
        rawString = t.image.substring(3, t.image.length() - 3);
     }) {
        return unescapeString(rawString);
     }
}

